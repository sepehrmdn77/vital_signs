name: FastAPI CI/CD

on:
  push:
    branches: [ main, dev ]
    tags:
      - 'v*'

  pull_request:
    branches: [ main, dev ]
    tags:
      - 'v*'
      
  workflow_dispatch:

jobs:
  test-build:
    name: CI/CD Pipeline
    runs-on: ubuntu-latest
    permissions: 
      checks: write
    
    strategy:
      matrix:
        python-version: ["3.12", "3.11", "3.10"]
    
    steps:
      # Stage 1: Checkout
      - name: Checkout code
        uses: actions/checkout@v5

      # Stage 2: Setup Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      # Stage 3: Linting
      - name: Install lint and dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint flake8

      - name: Run pylint
        run: pylint ./app/main.py

      - name: Run flake8  
        run: flake8 ./app/main.py

      # Stage 4: Testing
      - name: Install testing dependencies
        run: pip install pytest-cov

      - name: Run tests with coverage
        run: |
          pytest --cov=app --cov-report=xml:coverage-${{ matrix.python-version }}.xml --junitxml=pytest-report-${{ matrix.python-version }}.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            pytest-report-${{ matrix.python-version }}.xml
            coverage-${{ matrix.python-version }}.xml

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage-${{ matrix.python-version }}.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}
          token: ${{ secrets.CODECOV_TOKEN || '' }}

      - name: Extract version from tag (if exists)
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "VERSION=none" >> $GITHUB_ENV
          fi

      - name: Set Docker tag
        id: tag
        run: |
          if [[ "${{ env.VERSION }}" == "none" ]]; then
            echo "DOCKER_TAG=${GITHUB_SHA}" >> $GITHUB_ENV
          else
            echo "DOCKER_TAG=${{ env.VERSION }}" >> $GITHUB_ENV
          fi

      # Stage 5: Build (only on main branch)
      - name: Build Docker image
        if: github.ref == 'refs/heads/main'
        run: docker build -t sepehrmdn/vitalsigns-xxxx:${{ env.DOCKER_TAG }} -f Dockerfile .


      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to registry
        if: github.ref == 'refs/heads/main'
        run: docker push sepehrmdn/vitalsigns-xxxx:${{ env.DOCKER_TAG }}